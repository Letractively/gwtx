#Using GWT with Maven

= Introduction =

Apache Maven can be used to setup your GWT project and support the Java to JavaScript compilation process. 

= Dependencies =

First of all, your Maven project must declare dependencies on the GWT binaries for compilation. According to the GWT version you want to use, add the following dependencies to your pom.xml :

{{{
<project>
 ...
 <dependencies>
    <dependency>
      <groupId>com.google.gwt</groupId>
      <artifactId>gwt-user</artifactId>
      <version>${gwt.version}</version>
      <scope>provided</scope>
    </dependency>
    <dependency>
      <groupId>com.google.gwt</groupId>
      <artifactId>gwt-dev</artifactId>
      <version>${gwt.version}</version>
      <classifier>${gwt.variant}</classifier>
      <scope>provided</scope>
    </dependency>
    <dependency>
      <groupId>com.google.gwt</groupId>
      <artifactId>gwt-servlet</artifactId>
      <version>${gwt.version}</version>
    </dependency>
 </dependencies>
 ...
</project>
}}}

Configure gwt.version and gwt.variant to match your environment. 

{{{
<project>
 ...
 <properties>
   <!-- GWT 1.6 MileStone 1 on windows -->
   <gwt.version>1.6.0</gwt.version>
   <gwt.variant>windows</gwt.variant>
 </properties>
 ...
</project>
}}}

If you want to share your project and to be OS agnostic, you can use profiles to detect the gwt.variant to be used instead of hard-coding it as `<properties`> child element :

{{{
<project>
 ...
 <properties>
   <!-- GWT 1.6 MileStone 1 -->
   <gwt.version>1.6.0</gwt.version>
 </properties>

 <profiles>
    <!-- detect the adequate GWT variant -->
    <profile>
      <id>windows</id>
      <activation>
        <os>
          <family>windows</family>
        </os>
      </activation>
      <properties>
        <gwt.variant>windows</gwt.variant>
      </properties>
    </profile>
    <profile>
      <id>mac</id>
      <activation>
        <os>
          <family>mac</family>
        </os>
      </activation>
      <properties>
        <gwt.variant>mac</gwt.variant>
      </properties>
    </profile>
    <profile>
      <id>linux</id>
      <activation>
        <os>
          <name>linux</name>
        </os>
      </activation>
      <properties>
        <gwt.variant>linux</gwt.variant>
      </properties>
    </profile>    
  </profiles>
 ...
</project>
}}}

Now, your project can be used from your favorite IDE to write GWT code based on Maven dependencies.

= Compilation =

The [http://mojo.codehaus.org Mojo] project host a GWT plugin that can compile your GWT code into JavaScript and run other GWT tools. It also includes a code generator to automagically generate GWT-RPC async interfaces for your services.

This plugin is the result of merging the original Mojo plugin with the [http://code.google.com/p/gwt-maven/ gwt-maven] one hosted by googlecode.

{{{
<project>
...
 <build>
  <plugins>
    <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>gwt-maven-plugin</artifactId>
        <version>1.1-SNAPSHOT</version>
        <executions>
          <execution>
            <goals>
              <goal>compile</goal>
              <goal>generateAsync</goal>
            </goals>
          </execution>
        </executions>
    </plugin>
  </plugins>
 </build>
 ...
</project>

}}}

This maven plugin has many parameters to tweak the compiler. It can also run the I18n Generators, run a module in hosted mode or launch GwtTests. Refer to it's [http://mojo.codehaus.org/gwt-maven-plugin official documentation] for more informations.

Please note the 1.1 version of this plugin is still a SNAPSHOT, you'll need to enable Mojo plugins Snapshot repository as [http://mojo.codehaus.org/using-sandbox-plugins.html explained here].


= Setup your IDE =

The gwt-maven plugin can also setup your Eclipse IDE by creating launch configuration for your GWT modules. Just run `mvn gwt:eclipse` and they will be created in your project root . You can them right-clik them and select "Run as ..." to run the hosted browser. 